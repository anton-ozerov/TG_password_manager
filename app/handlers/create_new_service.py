from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.database.requests import Database
from app.handlers.main_menu import show_main_menu
from app.keyboards.back_button_kb import create_back_kb
from app.keyboards.create_new_service_kb import new_service_password_kb, change_first_password_kb, skip_comment_kb
from app.states.create_new_service_st import NewService
from app.utils.clear_name import clean_text
from app.utils.create_password import generate_password
from app.utils.encryption_decryption_passwords import hash_password, check_password


router = Router()


# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.callback_query(F.data == 'new_service')
async def add_new_service(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'."""
    await state.clear()

    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞\n\n–ü—Ä–∏–º–µ—Ä: <code>Google</code>',
                                     reply_markup=await create_back_kb())
    await state.set_state(NewService.name)


@router.message(NewService.name)  # –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.callback_query(F.data.startswith('new_service__'))  # –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä–æ–ª—è
async def get_new_service_name(msg_cbq: Message | CallbackQuery, state: FSMContext):
    """–ï—Å–ª–∏ Message - –ø–æ–ª—É—á–∞–µ–º –∏–º—è. –î–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å, –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä–æ–ª—è.
    –ê –∏–º–µ–Ω–Ω–æ: –¥–ª–∏–Ω–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –µ—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã, –µ—Å—Ç—å –ª–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏"""
    if isinstance(msg_cbq, Message):
        await state.update_data(name=msg_cbq.text)
        length, uppercase, digits, punctuation = 15, 1, 1, 1
    else:
        length, uppercase, digits, punctuation = [int(i[1:]) for i in msg_cbq.data.split('__')[1].split('-')]

    password = await generate_password(length=length, uppercase=uppercase, digits=digits, punctuation=punctuation)
    await state.update_data(hashed_password=await hash_password(password))  # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º. –ï—Å–ª–∏ —á—Ç–æ, –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è

    name = (await state.get_data())['name']
    text = (f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> {clean_text(name)}\n\n"
            f"<b>–î–ª–∏–Ω–∞:</b> {length}\n"
            f"<b>–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã:</b> {'–µ—Å—Ç—å' if uppercase else '–Ω–µ—Ç'}\n"
            f"<b>–¶–∏—Ñ—Ä—ã:</b> {'–µ—Å—Ç—å' if digits else '–Ω–µ—Ç'}\n"
            f"<b>–ü—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏:</b> {'–µ—Å—Ç—å' if punctuation else '–Ω–µ—Ç'}\n\n"
            f"<b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å:</b> <code>{clean_text(password)}</code>\n")
    kb = await new_service_password_kb(length=length, uppercase=uppercase, digits=digits, punctuation=punctuation)
    if isinstance(msg_cbq, Message):
        return await msg_cbq.answer(text=text, reply_markup=kb)
    else:
        return await msg_cbq.message.edit_text(text=text, reply_markup=kb)


# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "üìú–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π"
@router.callback_query(F.data == 'enter_your_password')
async def enter_password(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å–∫–∞—è –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å',
                                     reply_markup=await create_back_kb(f'new_service__l15-u1-d1-p1'))
    await state.set_state(NewService.password)


# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∞—à–∏–Ω—ã –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
@router.message(NewService.password)
async def get_password(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º)"""
    await message.delete()  # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.update_data(hashed_password=await hash_password(message.text))
    await state.set_state(NewService.password_again)
    msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑', reply_markup=change_first_password_kb)
    return msg


@router.message(NewService.password_again)  # –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∞—à–∏–Ω—ã –¥–ª—è –ü–û–í–¢–û–†–ù–û–ì–û –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
@router.callback_query(F.data == 'save_password_new_service')  # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
async def get_password_again(msg_cbq: Message | CallbackQuery, state: FSMContext):
    """–ï—Å–ª–∏ Callback - –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (—Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫–∞–∑–∞). –ï—Å–ª–∏ Message - –ø–æ–ª—É—á–∞–µ–º
    –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º: –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫
    –∑–∞–ø–∏—Å–∏ (—Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫–∞–∑–∞), –∞ –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑"""
    if isinstance(msg_cbq, CallbackQuery):  # –¢.–µ. –µ—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∞ –Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
        msg = await msg_cbq.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                                              reply_markup=skip_comment_kb)
        await state.set_state(NewService.comment)
    else:
        await msg_cbq.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ –ø–∞—Ä–æ–ª–µ–º

        hashed_master_password = (await state.get_data())['hashed_password']
        if await check_password(password=msg_cbq.text, hashed_password=hashed_master_password):
            msg = await msg_cbq.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                                       reply_markup=skip_comment_kb)
            await state.set_state(NewService.comment)
        else:
            await state.set_state(NewService.password_again)
            msg = await msg_cbq.answer('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                                       reply_markup=change_first_password_kb)
    return msg


@router.message(NewService.comment)  # –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.callback_query(F.data == 'skip_comment')  # –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
async def handle_comment(msg_cbq: Message | CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ Message. –ü–æ—Å–ª–µ —á–µ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    data = await state.get_data()
    await state.clear()

    if isinstance(msg_cbq, Message):  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        owner_id = msg_cbq.from_user.id
        comment = msg_cbq.text
    else:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        owner_id = msg_cbq.from_user.id
        comment = None

    await db.add_password(owner_id=owner_id, name=data['name'],
                          hashed_password=data['hashed_password'], comment=comment)
    await show_main_menu(msg_cbq, text='–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É')
